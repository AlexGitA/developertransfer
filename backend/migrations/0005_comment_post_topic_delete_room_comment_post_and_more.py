# Generated by Django 5.0.12 on 2025-02-24 08:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0004_userdetails_skills'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Content of the comment')),
                ('likes_count', models.PositiveIntegerField(default=0, help_text='Number of likes on this comment')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When the comment was created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last time the comment was updated')),
                ('author', models.ForeignKey(help_text='User who wrote the comment', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, help_text='Users who liked this comment', related_name='liked_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent comment for nested replies', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='backend.comment')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the post', max_length=150)),
                ('content', models.TextField(help_text='Content of the post')),
                ('url', models.URLField(blank=True, help_text='URL for link posts', null=True)),
                ('media', models.FileField(blank=True, help_text='Media file for image/video posts', null=True, upload_to='post_media/')),
                ('likes_count', models.PositiveIntegerField(default=0, help_text='Number of likes')),
                ('comments_count', models.PositiveIntegerField(default=0, help_text='Number of comments')),
                ('is_pinned', models.BooleanField(default=False, help_text='Whether the post is pinned to the top')),
                ('is_archived', models.BooleanField(default=False, help_text='Whether the post is archived')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When the post was created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last time the post was updated')),
                ('author', models.ForeignKey(help_text='User who created the post', on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, help_text='Users who liked this post', related_name='liked_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the topic', max_length=25, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the topic', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When the topic was created')),
                ('followers', models.ManyToManyField(blank=True, help_text='Users following this topic', related_name='followed_topics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Topic',
                'verbose_name_plural': 'Topics',
                'ordering': ['name'],
            },
        ),
        migrations.DeleteModel(
            name='Room',
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(help_text='Associated post', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='backend.post'),
        ),
        migrations.AddField(
            model_name='post',
            name='topic',
            field=models.ForeignKey(help_text='Topic of the post', on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='backend.topic'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['-created'], name='backend_com_created_c1a93b_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['post'], name='backend_com_post_id_1dc074_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['author'], name='backend_com_author__2327af_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-created'], name='backend_pos_created_b6de5b_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['author'], name='backend_pos_author__141f3c_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['topic'], name='backend_pos_topic_i_dbed26_idx'),
        ),
    ]
